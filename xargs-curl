#!/usr/bin/env bash


# Runtime Environment
set -o errexit
set -o nounset
set -o pipefail
# set -o xtrace


# ======================================
# Configuration
# ======================================

# Temp file where the concatenated files are written to
declare concatenation_list=$(mktemp)

# The default HTTP method
declare http_method="HEAD"

# The expected HTTP status
declare http_status=200

# Number of xargs processes to run in parallel
declare xargs_processes=1

# Verbosity mode
declare -i verbose=0

# List of possible script arguments (getopts)
# Very much like getopts, expected short options should be appended to the
# string here. Any option followed by a ':' takes a required argument.
readonly OPTIONS_LIST="v"

# Keeps anything that does not look like an option,
# and finally should contain the URL and URI files.
declare -a remote_files_array


# ======================================
# Print short help if no arguments
# ======================================

if [ "$#" -eq 0 ]; then
	echo;
	echo;
	echo "curlmaster"
	echo;
	echo "This script concatenates each URL in a given file with each URI in another one"
	echo "and checks its availability, using a HEAD request."
	echo "Any request not ending up with 200 OK will be reported."
	echo;
	echo "Usage: "
	echo "$0 [options] <urls> <uris>"
	echo;
	echo "Options:"
	echo "--get  Use GET rather than HEAD"
	echo " -v    Verbose output"	
	echo;
	echo "Parameters:"
	echo "<urls> File with base URLs"
	echo "<uris> File with documents URIs"
	echo;
	exit 1
fi


# ======================================
# Output and formatting functions
# ======================================

# Formatting stuff
readonly C_RED='\033[0;31m'
readonly C_GREEN='\033[0;32m'
readonly C_ORANGE=$(tput setaf 3)
readonly C_BLUE='\033[1;34m'
readonly NC='\033[0m' # No Color


# Error message and error exit, redirecting stdout to stderr
function e_error {
	echo -e >&2 "${C_RED}✘ Error:${NC} ${*-}";
	exit 1;
}

function e_info {
	echo -e "${C_BLUE}❱ Info:${NC} ${*-}"
}

function e_warning {
	echo -e "${C_ORANGE}❱ Warning:${NC} ${*-}"
}

function e_success () {
	echo -e "${C_GREEN}✔ Success:${NC} ${*-}"
}






# ======================================
# Requirements
# ======================================

# Check on Requirements
function require  {
	command -v "${1}" >/dev/null 2>&1 || e_error "$(printf "Program '%s' required, but it's not installed" "${1}")"
}

require xargs
require curl



# ======================================
#  Options parsing, with sections
#  1. _require_argument()
#  2. Normalize options
#  3. Parse Options
# ======================================

# --------------------------------------
# _require_argument()
#
# Usage:
#   _require_argument <option> <argument>
#
# If <argument> is blank or another option, print an error message
#
# This function is stolen from William Melody's bash-boilerplate
# <https://github.com/alphabetum/bash-boilerplate>
# --------------------------------------

_require_argument() {
		# Set local variables from arguments.
		#
		# NOTE: 'local' is a non-POSIX bash feature and keeps the variable local to
		# the block of code, as defined by curly braces. It's easiest to just think
		# of them as local to a function.
		local _option="${1:-}"
		local _argument="${2:-}"

		if [[ -z "${_argument}" ]] || [[ "${_argument}" =~ ^- ]]
		then
			e_error "$(printf "Option requires a argument: %s\n" "${_option}")"
		fi
}


# ---------------------------------------
# Normalize options
#
# This section is stolen from William Melody's bash-boilerplate
# <https://github.com/alphabetum/bash-boilerplate>
# ---------------------------------------

# iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
# while the number of arguments is greater than 0
while ((${#}))
do
	case ${1} in
		# if option is of type -ab
		-[!-]?*)
			# loop over each character starting with the second
			for ((i=1; i<${#1}; i++))
			do
				# extract 1 character from position 'i'
				c=${1:i:1}
				# add current char to options
				options+=("-${c}")

				# if option takes a required argument, and it's not the last char
				# make the rest of the string its argument
				if [[ ${OPTIONS_LIST} = *"${c}:"* && ${1:i+1} ]]
				then
					options+=("${1:i+1}")
					break
				fi
			done
			;;
		# if option is of type --foo=bar, split on first '='
		--?*=*)
			options+=("${1%%=*}" "${1#*=}")
			;;
		# end of options, stop breaking them up
		--)
			options+=(--endopts)
			shift
			options+=("${@}")
			break
			;;
		# otherwise, nothing special
		*)
			options+=("${1}")
			;;
	esac

	shift
done
# set new positional parameters to altered options. Set default to blank.
set -- "${options[@]:-}"
unset options




# ---------------------------------------
# Parse Options
# ---------------------------------------

# getopts and getopts have inconsistent behavior, so using a simple home-brewed
# while loop. This isn't perfectly compliant with POSIX, but it's close enough
# and this appears to be a widely used approach.
#
# More info:
#   http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
#   http://stackoverflow.com/a/14203146
#   http://stackoverflow.com/a/7948533
#
# This section is stolen from William Melody's bash-boilerplate
# <https://github.com/alphabetum/bash-boilerplate>
while [ ${#} -gt 0 ]
do
		__option="${1:-}"
		__maybe_param="${2:-}"

		case "${__option}" in
				-v|--verbose)
						verbose=1
						;;

				--get)
						http_method="GET"
						;;

				--endopts)
						# Terminate option parsing.
						break
						;;
				-*)
						# Assume option because of leading "-"
						e_error "$(printf "Unexpected option: %s\n" "${__option}")"
						;;
				*)
						# "Anything else must be an image parameter"
						# This is a WORKAROUND, as without this "*)" block any given image parameters
						# after the arguments seem to get lost (i.e., stuck in last $__option checked).remote_files_array
						remote_files_array+=("${__option}")
						;;
		esac
		shift

done





# ======================================
# Business
# ======================================


# Parameters for CURL with xargs.
declare -a xargs_arguments=()
xargs_arguments+=( -n1 )
xargs_arguments+=( -P ${xargs_processes} )
xargs_arguments+=( curl )
xargs_arguments+=( -X "${http_method}" )
xargs_arguments+=( --head )
xargs_arguments+=( -o /dev/null )
xargs_arguments+=( --silent )
xargs_arguments+=( --write-out '%{http_code} - %{url_effective}\n')


declare urls_file=${remote_files_array[0]}
declare uris_file=${remote_files_array[1]}


# Concatenate URLs and URIs
# and write them to buildfile
for base_url in `cat ${urls_file}`; do
	for document in `cat ${uris_file}`; do
		echo "${base_url}${document}" >> $concatenation_list
	done
done



# The Healthcheck: every line from buildfile
echo;
e_info "Health-check URLs in file '${concatenation_list}' using '${http_method}'"

if [ $verbose -gt 0 ]; then
	echo;
	xargs "${xargs_arguments[@]}" < $concatenation_list
else
	e_info "Display only those not ending up with status code '${http_status}'..."	
	echo;
	xargs "${xargs_arguments[@]}" < $concatenation_list | grep -v ^${http_status}
fi

echo;
e_success "Finished.";
echo;

